"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@studio-freight";
exports.ids = ["vendor-chunks/@studio-freight"];
exports.modules = {

/***/ "(ssr)/./node_modules/@studio-freight/lenis/dist/lenis.modern.mjs":
/*!******************************************************************!*\
  !*** ./node_modules/@studio-freight/lenis/dist/lenis.modern.mjs ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ r)\n/* harmony export */ });\nfunction t() {\n    return t = Object.assign ? Object.assign.bind() : function(t) {\n        for(var i = 1; i < arguments.length; i++){\n            var e = arguments[i];\n            for(var s in e)Object.prototype.hasOwnProperty.call(e, s) && (t[s] = e[s]);\n        }\n        return t;\n    }, t.apply(this, arguments);\n}\nfunction i(t, i, e) {\n    return Math.max(t, Math.min(i, e));\n}\nclass e {\n    advance(t) {\n        var e;\n        if (!this.isRunning) return;\n        let s = !1;\n        if (this.lerp) this.value = (o = this.value, n = this.to, (1 - (r = 1 - Math.exp(-60 * this.lerp * t))) * o + r * n), Math.round(this.value) === this.to && (this.value = this.to, s = !0);\n        else {\n            this.currentTime += t;\n            const e = i(0, this.currentTime / this.duration, 1);\n            s = e >= 1;\n            const o = s ? 1 : this.easing(e);\n            this.value = this.from + (this.to - this.from) * o;\n        }\n        var o, n, r;\n        null == (e = this.onUpdate) || e.call(this, this.value, s), s && this.stop();\n    }\n    stop() {\n        this.isRunning = !1;\n    }\n    fromTo(t, i, { lerp: e = .1, duration: s = 1, easing: o = (t)=>t, onStart: n, onUpdate: r }) {\n        this.from = this.value = t, this.to = i, this.lerp = e, this.duration = s, this.easing = o, this.currentTime = 0, this.isRunning = !0, null == n || n(), this.onUpdate = r;\n    }\n}\nclass s {\n    constructor({ wrapper: t, content: i, autoResize: e = !0 } = {}){\n        if (this.resize = ()=>{\n            this.onWrapperResize(), this.onContentResize();\n        }, this.onWrapperResize = ()=>{\n            this.wrapper === window ? (this.width = window.innerWidth, this.height = window.innerHeight) : (this.width = this.wrapper.clientWidth, this.height = this.wrapper.clientHeight);\n        }, this.onContentResize = ()=>{\n            this.scrollHeight = this.content.scrollHeight, this.scrollWidth = this.content.scrollWidth;\n        }, this.wrapper = t, this.content = i, e) {\n            const t = function(t, i) {\n                let e;\n                return function() {\n                    let i = arguments, s = this;\n                    clearTimeout(e), e = setTimeout(function() {\n                        t.apply(s, i);\n                    }, 250);\n                };\n            }(this.resize);\n            this.wrapper !== window && (this.wrapperResizeObserver = new ResizeObserver(t), this.wrapperResizeObserver.observe(this.wrapper)), this.contentResizeObserver = new ResizeObserver(t), this.contentResizeObserver.observe(this.content);\n        }\n        this.resize();\n    }\n    destroy() {\n        var t, i;\n        null == (t = this.wrapperResizeObserver) || t.disconnect(), null == (i = this.contentResizeObserver) || i.disconnect();\n    }\n    get limit() {\n        return {\n            x: this.scrollWidth - this.width,\n            y: this.scrollHeight - this.height\n        };\n    }\n}\nclass o {\n    constructor(){\n        this.events = {};\n    }\n    emit(t, ...i) {\n        let e = this.events[t] || [];\n        for(let t = 0, s = e.length; t < s; t++)e[t](...i);\n    }\n    on(t, i) {\n        var e;\n        return (null == (e = this.events[t]) ? void 0 : e.push(i)) || (this.events[t] = [\n            i\n        ]), ()=>{\n            var e;\n            this.events[t] = null == (e = this.events[t]) ? void 0 : e.filter((t)=>i !== t);\n        };\n    }\n    off(t, i) {\n        var e;\n        this.events[t] = null == (e = this.events[t]) ? void 0 : e.filter((t)=>i !== t);\n    }\n    destroy() {\n        this.events = {};\n    }\n}\nclass n {\n    constructor(t, { wheelMultiplier: e = 1, touchMultiplier: s = 2, normalizeWheel: n = !1 }){\n        this.onTouchStart = (t)=>{\n            const { clientX: i, clientY: e } = t.targetTouches ? t.targetTouches[0] : t;\n            this.touchStart.x = i, this.touchStart.y = e, this.lastDelta = {\n                x: 0,\n                y: 0\n            };\n        }, this.onTouchMove = (t)=>{\n            const { clientX: i, clientY: e } = t.targetTouches ? t.targetTouches[0] : t, s = -(i - this.touchStart.x) * this.touchMultiplier, o = -(e - this.touchStart.y) * this.touchMultiplier;\n            this.touchStart.x = i, this.touchStart.y = e, this.lastDelta = {\n                x: s,\n                y: o\n            }, this.emitter.emit(\"scroll\", {\n                deltaX: s,\n                deltaY: o,\n                event: t\n            });\n        }, this.onTouchEnd = (t)=>{\n            this.emitter.emit(\"scroll\", {\n                deltaX: this.lastDelta.x,\n                deltaY: this.lastDelta.y,\n                event: t\n            });\n        }, this.onWheel = (t)=>{\n            let { deltaX: e, deltaY: s } = t;\n            this.normalizeWheel && (e = i(-100, e, 100), s = i(-100, s, 100)), e *= this.wheelMultiplier, s *= this.wheelMultiplier, this.emitter.emit(\"scroll\", {\n                deltaX: e,\n                deltaY: s,\n                event: t\n            });\n        }, this.element = t, this.wheelMultiplier = e, this.touchMultiplier = s, this.normalizeWheel = n, this.touchStart = {\n            x: null,\n            y: null\n        }, this.emitter = new o, this.element.addEventListener(\"wheel\", this.onWheel, {\n            passive: !1\n        }), this.element.addEventListener(\"touchstart\", this.onTouchStart, {\n            passive: !1\n        }), this.element.addEventListener(\"touchmove\", this.onTouchMove, {\n            passive: !1\n        }), this.element.addEventListener(\"touchend\", this.onTouchEnd, {\n            passive: !1\n        });\n    }\n    on(t, i) {\n        return this.emitter.on(t, i);\n    }\n    destroy() {\n        this.emitter.destroy(), this.element.removeEventListener(\"wheel\", this.onWheel, {\n            passive: !1\n        }), this.element.removeEventListener(\"touchstart\", this.onTouchStart, {\n            passive: !1\n        }), this.element.removeEventListener(\"touchmove\", this.onTouchMove, {\n            passive: !1\n        }), this.element.removeEventListener(\"touchend\", this.onTouchEnd, {\n            passive: !1\n        });\n    }\n}\nclass r {\n    constructor({ wrapper: i = window, content: r = document.documentElement, wheelEventsTarget: l = i, eventsTarget: h = l, smoothWheel: a = !0, smoothTouch: c = !1, syncTouch: u = !1, syncTouchLerp: p = .1, __iosNoInertiaSyncTouchLerp: d = .4, touchInertiaMultiplier: m = 35, duration: g, easing: v = (t)=>Math.min(1, 1.001 - Math.pow(2, -10 * t)), lerp: S = !g && .1, infinite: w = !1, orientation: f = \"vertical\", gestureOrientation: y = \"vertical\", touchMultiplier: T = 1, wheelMultiplier: z = 1, normalizeWheel: M = !1, autoResize: L = !0 } = {}){\n        this.onVirtualScroll = ({ deltaX: i, deltaY: e, event: s })=>{\n            if (s.ctrlKey) return;\n            const o = s.type.includes(\"touch\"), n = s.type.includes(\"wheel\");\n            if (\"both\" === this.options.gestureOrientation && 0 === i && 0 === e || \"vertical\" === this.options.gestureOrientation && 0 === e || \"horizontal\" === this.options.gestureOrientation && 0 === i || o && \"vertical\" === this.options.gestureOrientation && 0 === this.scroll && !this.options.infinite && e <= 0) return;\n            let r = s.composedPath();\n            if (r = r.slice(0, r.indexOf(this.rootElement)), r.find((t)=>{\n                var i;\n                return (null == t.hasAttribute ? void 0 : t.hasAttribute(\"data-lenis-prevent\")) || o && (null == t.hasAttribute ? void 0 : t.hasAttribute(\"data-lenis-prevent-touch\")) || n && (null == t.hasAttribute ? void 0 : t.hasAttribute(\"data-lenis-prevent-wheel\")) || (null == (i = t.classList) ? void 0 : i.contains(\"lenis\"));\n            })) return;\n            if (this.isStopped || this.isLocked) return void s.preventDefault();\n            if (this.isSmooth = (this.options.smoothTouch || this.options.syncTouch) && o || this.options.smoothWheel && n, !this.isSmooth) return this.isScrolling = !1, void this.animate.stop();\n            s.preventDefault();\n            let l = e;\n            \"both\" === this.options.gestureOrientation ? l = Math.abs(e) > Math.abs(i) ? e : i : \"horizontal\" === this.options.gestureOrientation && (l = i);\n            const h = o && this.options.syncTouch, a = o && \"touchend\" === s.type && Math.abs(l) > 1;\n            a && (l = this.velocity * this.options.touchInertiaMultiplier), this.scrollTo(this.targetScroll + l, t({\n                programmatic: !1\n            }, h && {\n                lerp: a ? this.syncTouchLerp : this.options.__iosNoInertiaSyncTouchLerp\n            }));\n        }, this.onScroll = ()=>{\n            if (!this.isScrolling) {\n                const t = this.animatedScroll;\n                this.animatedScroll = this.targetScroll = this.actualScroll, this.velocity = 0, this.direction = Math.sign(this.animatedScroll - t), this.emit();\n            }\n        }, window.lenisVersion = \"1.0.27\", i !== document.documentElement && i !== document.body || (i = window), this.options = {\n            wrapper: i,\n            content: r,\n            wheelEventsTarget: l,\n            eventsTarget: h,\n            smoothWheel: a,\n            smoothTouch: c,\n            syncTouch: u,\n            syncTouchLerp: p,\n            __iosNoInertiaSyncTouchLerp: d,\n            touchInertiaMultiplier: m,\n            duration: g,\n            easing: v,\n            lerp: S,\n            infinite: w,\n            gestureOrientation: y,\n            orientation: f,\n            touchMultiplier: T,\n            wheelMultiplier: z,\n            normalizeWheel: M,\n            autoResize: L\n        }, this.animate = new e, this.emitter = new o, this.dimensions = new s({\n            wrapper: i,\n            content: r,\n            autoResize: L\n        }), this.toggleClass(\"lenis\", !0), this.velocity = 0, this.isLocked = !1, this.isStopped = !1, this.isSmooth = u || a || c, this.isScrolling = !1, this.targetScroll = this.animatedScroll = this.actualScroll, this.options.wrapper.addEventListener(\"scroll\", this.onScroll, {\n            passive: !1\n        }), this.virtualScroll = new n(h, {\n            touchMultiplier: T,\n            wheelMultiplier: z,\n            normalizeWheel: M\n        }), this.virtualScroll.on(\"scroll\", this.onVirtualScroll);\n    }\n    destroy() {\n        this.emitter.destroy(), this.options.wrapper.removeEventListener(\"scroll\", this.onScroll, {\n            passive: !1\n        }), this.virtualScroll.destroy(), this.dimensions.destroy(), this.toggleClass(\"lenis\", !1), this.toggleClass(\"lenis-smooth\", !1), this.toggleClass(\"lenis-scrolling\", !1), this.toggleClass(\"lenis-stopped\", !1), this.toggleClass(\"lenis-locked\", !1);\n    }\n    on(t, i) {\n        return this.emitter.on(t, i);\n    }\n    off(t, i) {\n        return this.emitter.off(t, i);\n    }\n    setScroll(t) {\n        this.isHorizontal ? this.rootElement.scrollLeft = t : this.rootElement.scrollTop = t;\n    }\n    resize() {\n        this.dimensions.resize();\n    }\n    emit() {\n        this.emitter.emit(\"scroll\", this);\n    }\n    reset() {\n        this.isLocked = !1, this.isScrolling = !1, this.velocity = 0, this.animate.stop();\n    }\n    start() {\n        this.isStopped = !1, this.reset();\n    }\n    stop() {\n        this.isStopped = !0, this.animate.stop(), this.reset();\n    }\n    raf(t) {\n        const i = t - (this.time || t);\n        this.time = t, this.animate.advance(.001 * i);\n    }\n    scrollTo(t, { offset: e = 0, immediate: s = !1, lock: o = !1, duration: n = this.options.duration, easing: r = this.options.easing, lerp: l = !n && this.options.lerp, onComplete: h = null, force: a = !1, programmatic: c = !0 } = {}) {\n        if (!this.isStopped && !this.isLocked || a) {\n            if ([\n                \"top\",\n                \"left\",\n                \"start\"\n            ].includes(t)) t = 0;\n            else if ([\n                \"bottom\",\n                \"right\",\n                \"end\"\n            ].includes(t)) t = this.limit;\n            else {\n                var u;\n                let i;\n                if (\"string\" == typeof t ? i = document.querySelector(t) : null != (u = t) && u.nodeType && (i = t), i) {\n                    if (this.options.wrapper !== window) {\n                        const t = this.options.wrapper.getBoundingClientRect();\n                        e -= this.isHorizontal ? t.left : t.top;\n                    }\n                    const s = i.getBoundingClientRect();\n                    t = (this.isHorizontal ? s.left : s.top) + this.animatedScroll;\n                }\n            }\n            if (\"number\" == typeof t) {\n                if (t += e, t = Math.round(t), this.options.infinite ? c && (this.targetScroll = this.animatedScroll = this.scroll) : t = i(0, t, this.limit), s) return this.animatedScroll = this.targetScroll = t, this.setScroll(this.scroll), this.reset(), void (null == h || h(this));\n                if (!c) {\n                    if (t === this.targetScroll) return;\n                    this.targetScroll = t;\n                }\n                this.animate.fromTo(this.animatedScroll, t, {\n                    duration: n,\n                    easing: r,\n                    lerp: l,\n                    onStart: ()=>{\n                        o && (this.isLocked = !0), this.isScrolling = !0;\n                    },\n                    onUpdate: (t, i)=>{\n                        this.isScrolling = !0, this.velocity = t - this.animatedScroll, this.direction = Math.sign(this.velocity), this.animatedScroll = t, this.setScroll(this.scroll), c && (this.targetScroll = t), i || this.emit(), i && requestAnimationFrame(()=>{\n                            this.reset(), this.emit(), null == h || h(this);\n                        });\n                    }\n                });\n            }\n        }\n    }\n    get rootElement() {\n        return this.options.wrapper === window ? this.options.content : this.options.wrapper;\n    }\n    get limit() {\n        return this.dimensions.limit[this.isHorizontal ? \"x\" : \"y\"];\n    }\n    get isHorizontal() {\n        return \"horizontal\" === this.options.orientation;\n    }\n    get actualScroll() {\n        return this.isHorizontal ? this.rootElement.scrollLeft : this.rootElement.scrollTop;\n    }\n    get scroll() {\n        return this.options.infinite ? (this.animatedScroll % (t = this.limit) + t) % t : this.animatedScroll;\n        var t;\n    }\n    get progress() {\n        return 0 === this.limit ? 1 : this.scroll / this.limit;\n    }\n    get isSmooth() {\n        return this.__isSmooth;\n    }\n    set isSmooth(t) {\n        this.__isSmooth !== t && (this.__isSmooth = t, this.toggleClass(\"lenis-smooth\", t));\n    }\n    get isScrolling() {\n        return this.__isScrolling;\n    }\n    set isScrolling(t) {\n        this.__isScrolling !== t && (this.__isScrolling = t, this.toggleClass(\"lenis-scrolling\", t));\n    }\n    get isStopped() {\n        return this.__isStopped;\n    }\n    set isStopped(t) {\n        this.__isStopped !== t && (this.__isStopped = t, this.toggleClass(\"lenis-stopped\", t));\n    }\n    get isLocked() {\n        return this.__isLocked;\n    }\n    set isLocked(t) {\n        this.__isLocked !== t && (this.__isLocked = t, this.toggleClass(\"lenis-locked\", t));\n    }\n    get className() {\n        let t = \"lenis\";\n        return this.isStopped && (t += \" lenis-stopped\"), this.isLocked && (t += \" lenis-locked\"), this.isScrolling && (t += \" lenis-scrolling\"), this.isSmooth && (t += \" lenis-smooth\"), t;\n    }\n    toggleClass(t, i) {\n        this.rootElement.classList.toggle(t, i), this.emitter.emit(\"className change\", this);\n    }\n}\n //# sourceMappingURL=lenis.modern.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@studio-freight/lenis/dist/lenis.modern.mjs\n");

/***/ })

};
;